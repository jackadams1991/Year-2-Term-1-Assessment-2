/*
* Class Name: RentalGUI
* Class Purpose: This class creates the GUI and handles action and events that can occur with tabs and buttons
* Student ID: S0201412
* Student Name: Jack Adams
*/


import java.util.ArrayList;
import java.util.*;
import java.io.*;
import java.nio.file.*;
import java.io.IOException;
import static java.nio.file.StandardOpenOption.*;
import java.awt.BorderLayout;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
import javax.swing.event.ChangeListener;
import javax.swing.event.ChangeEvent;
import javax.swing.table.DefaultTableModel;

public class RentalGUI extends JFrame implements ActionListener, ChangeListener {

    /**
     * Creates new form RentalGUI
     */
    public RentalGUI() {
        initComponents();
        //Adding action/change listeners for the tabs and buttons.
        rentalJTabbedPane.addChangeListener(this);
        roomSaveJButton.addActionListener(this);
        wholeSaveJButton.addActionListener(this);
        editUpdateJButton.addActionListener(this);
        clearEditFormJBtn.addActionListener(this);
        deleteRentalJBtn.addActionListener(this);
        exportRentalsJBtn.addActionListener(this);
        exitJButton.addActionListener(this);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new JScrollPane();
        jTable1 = new JTable();
        rentalJTabbedPane = new JTabbedPane();
        welcomeJPanel = new JPanel();
        welcomeJLabel = new JLabel();
        enterRentalJLabel = new JLabel();
        editRentalJLabel = new JLabel();
        displayRentalJLabel = new JLabel();
        exitJButton = new JButton();
        jLabel1 = new JLabel();
        wholeRentalJPanel = new JPanel();
        wholeRentalIdJLabel = new JLabel();
        wholeRentalIdJTextField = new JTextField();
        wholeAddressDetailsJLabel = new JLabel();
        wholeAddressDetailsJTextField = new JTextField();
        wholePriceJLabel = new JLabel();
        wholePriceJTextField = new JTextField();
        wholeFurnishedJLabel = new JLabel();
        wholeRoomJLabel = new JLabel();
        wholeRoomJTextField = new JTextField();
        wholeBathroomJLabel = new JLabel();
        wholeBathroomJTextField = new JTextField();
        wholeGarageJLabel = new JLabel();
        wholePetsJLabel = new JLabel();
        wholeRentalDescJLabel = new JLabel();
        wholeRentalDescJScrollPane = new JScrollPane();
        wholeRentalDescJTextArea = new JTextArea();
        wholeSaveJButton = new JButton();
        wholeFurnishedJComboBox = new JComboBox<>();
        wholeGarageJComboBox = new JComboBox<>();
        wholePetsJComboBox = new JComboBox<>();
        roomRentalJPanel = new JPanel();
        roomRentalIdJLabel = new JLabel();
        roomRentalIdJTextField = new JTextField();
        roomAddressDetailsJLabel = new JLabel();
        roomAddressDetailsJTextField = new JTextField();
        roomPriceJLabel = new JLabel();
        roomPriceJTextField = new JTextField();
        roomFurnishedJLabel = new JLabel();
        roomCouplesJLabel = new JLabel();
        roomBathroomJLabel = new JLabel();
        roomRentalDescJLabel = new JLabel();
        roomRentalDescJScrollPane = new JScrollPane();
        roomRentalDescJTextArea = new JTextArea();
        roomSaveJButton = new JButton();
        roomFurnishedJComboBox = new JComboBox<>();
        roomCouplesJComboBox = new JComboBox<>();
        roomAttBathrromJComboBox = new JComboBox<>();
        editRentalJPanel = new JPanel();
        editRentalIdJLabel = new JLabel();
        editRentalIdJTextField = new JTextField();
        editAddressDetailsJLabel = new JLabel();
        editAddressDetailsJTextField = new JTextField();
        editPriceJLabel = new JLabel();
        editPriceJTextField = new JTextField();
        editRoomJLabel = new JLabel();
        editRoomJTextField = new JTextField();
        editBathroomJLabel = new JLabel();
        editBathroomJTextField = new JTextField();
        editFurnishedJLabel = new JLabel();
        editGarageJLabel = new JLabel();
        editPetsJLabel = new JLabel();
        editCouplesJLabel = new JLabel();
        editAttBathroomJLabel = new JLabel();
        editRentalDescJLabel = new JLabel();
        editRentalDescJScrollPane = new JScrollPane();
        editRentalDescJTextArea = new JTextArea();
        editFurnishedJComboBox = new JComboBox<>();
        editCoupleJComboBox = new JComboBox<>();
        editGarageJComboBox = new JComboBox<>();
        editAttBathroomJComboBox = new JComboBox<>();
        editPetJComboBox = new JComboBox<>();
        editUpdateJButton = new JButton();
        clearEditFormJBtn = new JButton();
        deleteRentalJBtn = new JButton();
        displayRentalJPanel = new JPanel();
        jScrollPane3 = new JScrollPane();
        displayRentalJTable = new JTable();
        exportRentalsJBtn = new JButton();

        jTable1.setModel(new DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setTitle("FSA Rental System");

        welcomeJLabel.setFont(new Font("Tahoma", 1, 14)); // NOI18N
        welcomeJLabel.setText("Welcome to the Friendly Student Accommodation Rental Entry system!");

        enterRentalJLabel.setFont(new Font("Tahoma", 0, 13)); // NOI18N
        enterRentalJLabel.setText("To enter a new house rental, use the New House tab. To enter a new room rental, use the New Room tab.");

        editRentalJLabel.setFont(new Font("Tahoma", 0, 13)); // NOI18N
        editRentalJLabel.setText("To edit a previously entered rental, use the Edit Rental tab. NOTE: A rental must be entered before using this tab. ");

        displayRentalJLabel.setFont(new Font("Tahoma", 0, 13)); // NOI18N
        displayRentalJLabel.setText("To display the entered properties, use the Display All tab. NOTE: A rental must be entered before using this tab.");

        exitJButton.setText("Exit");

        jLabel1.setFont(new Font("Tahoma", 0, 13)); // NOI18N
        jLabel1.setText("To exit the system, use the Exit button below on this tab or the X symbol in the top right hand corner.");

        GroupLayout welcomeJPanelLayout = new GroupLayout(welcomeJPanel);
        welcomeJPanel.setLayout(welcomeJPanelLayout);
        welcomeJPanelLayout.setHorizontalGroup(welcomeJPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(welcomeJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(welcomeJPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(welcomeJPanelLayout.createSequentialGroup()
                        .addGroup(welcomeJPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(exitJButton)
                            .addComponent(editRentalJLabel)
                            .addComponent(jLabel1)
                            .addComponent(enterRentalJLabel))
                        .addContainerGap(119, Short.MAX_VALUE))
                    .addGroup(welcomeJPanelLayout.createSequentialGroup()
                        .addGroup(welcomeJPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(displayRentalJLabel)
                            .addComponent(welcomeJLabel))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        welcomeJPanelLayout.setVerticalGroup(welcomeJPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(welcomeJPanelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(welcomeJLabel)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(enterRentalJLabel)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editRentalJLabel)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(displayRentalJLabel)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 277, Short.MAX_VALUE)
                .addComponent(exitJButton)
                .addContainerGap())
        );

        rentalJTabbedPane.addTab("Welcome", welcomeJPanel);

        wholeRentalIdJLabel.setText("Rental ID:");

        wholeRentalIdJTextField.setEditable(false);

        wholeAddressDetailsJLabel.setText("Rental Address:");

        wholePriceJLabel.setText("Weekly Price: $");

        wholeFurnishedJLabel.setText("Rental Furnished? :");

        wholeRoomJLabel.setText("Number of Rooms:");

        wholeBathroomJLabel.setText("Number of Bathrooms:");

        wholeGarageJLabel.setText("Garage Space? :");

        wholePetsJLabel.setText("Pets Allowed? :");

        wholeRentalDescJLabel.setText("Rental Description:");

        wholeRentalDescJTextArea.setColumns(20);
        wholeRentalDescJTextArea.setFont(new Font("Tahoma", 0, 11)); // NOI18N
        wholeRentalDescJTextArea.setRows(5);
        wholeRentalDescJScrollPane.setViewportView(wholeRentalDescJTextArea);

        wholeSaveJButton.setText("Save");

        wholeFurnishedJComboBox.setModel(new DefaultComboBoxModel<>(new String[] { "Please Select a Value...", "True", "False" }));

        wholeGarageJComboBox.setModel(new DefaultComboBoxModel<>(new String[] { "Please Select a Value...", "True", "False" }));

        wholePetsJComboBox.setModel(new DefaultComboBoxModel<>(new String[] { "Please Select a Value...", "True", "False" }));

        GroupLayout wholeRentalJPanelLayout = new GroupLayout(wholeRentalJPanel);
        wholeRentalJPanel.setLayout(wholeRentalJPanelLayout);
        wholeRentalJPanelLayout.setHorizontalGroup(wholeRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(wholeRentalJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(wholeRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                    .addGroup(wholeRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(wholeRentalDescJLabel)
                        .addGroup(GroupLayout.Alignment.TRAILING, wholeRentalJPanelLayout.createSequentialGroup()
                            .addGroup(wholeRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                .addGroup(wholeRentalJPanelLayout.createSequentialGroup()
                                    .addComponent(wholeRoomJLabel)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(wholeRoomJTextField, GroupLayout.PREFERRED_SIZE, 45, GroupLayout.PREFERRED_SIZE))
                                .addGroup(wholeRentalJPanelLayout.createSequentialGroup()
                                    .addComponent(wholeBathroomJLabel)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(wholeBathroomJTextField, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE))
                                .addGroup(wholeRentalJPanelLayout.createSequentialGroup()
                                    .addComponent(wholeRentalIdJLabel)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(wholeRentalIdJTextField, GroupLayout.PREFERRED_SIZE, 60, GroupLayout.PREFERRED_SIZE))
                                .addGroup(wholeRentalJPanelLayout.createSequentialGroup()
                                    .addComponent(wholePriceJLabel)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(wholePriceJTextField)))
                            .addGap(164, 164, 164)
                            .addGroup(wholeRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addGroup(wholeRentalJPanelLayout.createSequentialGroup()
                                    .addComponent(wholePetsJLabel)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(wholePetsJComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addGroup(wholeRentalJPanelLayout.createSequentialGroup()
                                    .addComponent(wholeFurnishedJLabel)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(wholeFurnishedJComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addGroup(wholeRentalJPanelLayout.createSequentialGroup()
                                    .addComponent(wholeGarageJLabel)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(wholeGarageJComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                            .addGap(14, 14, 14))
                        .addComponent(wholeSaveJButton))
                    .addGroup(wholeRentalJPanelLayout.createSequentialGroup()
                        .addComponent(wholeAddressDetailsJLabel)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(wholeAddressDetailsJTextField, GroupLayout.PREFERRED_SIZE, 420, GroupLayout.PREFERRED_SIZE))
                    .addComponent(wholeRentalDescJScrollPane))
                .addContainerGap(223, Short.MAX_VALUE))
        );
        wholeRentalJPanelLayout.setVerticalGroup(wholeRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(wholeRentalJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(wholeRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(wholeRentalIdJLabel)
                    .addComponent(wholeRentalIdJTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(wholeRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(wholeAddressDetailsJLabel)
                    .addComponent(wholeAddressDetailsJTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(wholeRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(wholePriceJLabel)
                    .addComponent(wholePriceJTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(wholeFurnishedJLabel)
                    .addComponent(wholeFurnishedJComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(wholeRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(wholeRoomJLabel)
                    .addComponent(wholeRoomJTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(wholeGarageJLabel)
                    .addComponent(wholeGarageJComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(wholeRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(wholeBathroomJLabel)
                    .addComponent(wholeBathroomJTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(wholePetsJLabel)
                    .addComponent(wholePetsJComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(wholeRentalDescJLabel)
                .addGap(2, 2, 2)
                .addComponent(wholeRentalDescJScrollPane, GroupLayout.PREFERRED_SIZE, 190, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addComponent(wholeSaveJButton)
                .addContainerGap())
        );

        rentalJTabbedPane.addTab("New House", wholeRentalJPanel);

        roomRentalIdJLabel.setText("Rental ID:");

        roomRentalIdJTextField.setEditable(false);

        roomAddressDetailsJLabel.setText("Rental Address:");

        roomPriceJLabel.setText("Weekly Price: $");

        roomFurnishedJLabel.setText("Rental Furnished? :");

        roomCouplesJLabel.setText("Couples Allowed? :");

        roomBathroomJLabel.setText("Attached Bathroom? :");

        roomRentalDescJLabel.setText("Rental Description:");

        roomRentalDescJTextArea.setColumns(20);
        roomRentalDescJTextArea.setRows(5);
        roomRentalDescJScrollPane.setViewportView(roomRentalDescJTextArea);

        roomSaveJButton.setText("Save");

        roomFurnishedJComboBox.setModel(new DefaultComboBoxModel<>(new String[] { "Please Select a Value...", "True", "False" }));

        roomCouplesJComboBox.setModel(new DefaultComboBoxModel<>(new String[] { "Please Select a Value...", "True", "False" }));

        roomAttBathrromJComboBox.setModel(new DefaultComboBoxModel<>(new String[] { "Please Select a Value...", "True", "False" }));

        GroupLayout roomRentalJPanelLayout = new GroupLayout(roomRentalJPanel);
        roomRentalJPanel.setLayout(roomRentalJPanelLayout);
        roomRentalJPanelLayout.setHorizontalGroup(roomRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(roomRentalJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(roomRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(roomRentalJPanelLayout.createSequentialGroup()
                        .addComponent(roomRentalIdJLabel)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(roomRentalIdJTextField, GroupLayout.PREFERRED_SIZE, 60, GroupLayout.PREFERRED_SIZE))
                    .addGroup(roomRentalJPanelLayout.createSequentialGroup()
                        .addComponent(roomCouplesJLabel)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(roomCouplesJComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .addGroup(roomRentalJPanelLayout.createSequentialGroup()
                        .addComponent(roomBathroomJLabel)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(roomAttBathrromJComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .addComponent(roomRentalDescJLabel)
                    .addGroup(roomRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                        .addComponent(roomRentalDescJScrollPane, GroupLayout.Alignment.LEADING)
                        .addGroup(roomRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(roomSaveJButton)
                            .addGroup(roomRentalJPanelLayout.createSequentialGroup()
                                .addComponent(roomAddressDetailsJLabel)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(roomAddressDetailsJTextField, GroupLayout.PREFERRED_SIZE, 420, GroupLayout.PREFERRED_SIZE))))
                    .addGroup(roomRentalJPanelLayout.createSequentialGroup()
                        .addComponent(roomPriceJLabel)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(roomPriceJTextField, GroupLayout.PREFERRED_SIZE, 71, GroupLayout.PREFERRED_SIZE))
                    .addGroup(roomRentalJPanelLayout.createSequentialGroup()
                        .addComponent(roomFurnishedJLabel)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(roomFurnishedJComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(273, Short.MAX_VALUE))
        );
        roomRentalJPanelLayout.setVerticalGroup(roomRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(roomRentalJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(roomRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(roomRentalIdJLabel)
                    .addComponent(roomRentalIdJTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(roomRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(roomAddressDetailsJLabel)
                    .addComponent(roomAddressDetailsJTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(roomRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(roomPriceJLabel)
                    .addComponent(roomPriceJTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(roomRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(roomFurnishedJLabel)
                    .addComponent(roomFurnishedJComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(roomRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(roomCouplesJLabel)
                    .addComponent(roomCouplesJComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(roomRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(roomBathroomJLabel)
                    .addComponent(roomAttBathrromJComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(roomRentalDescJLabel)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(roomRentalDescJScrollPane, GroupLayout.PREFERRED_SIZE, 165, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(roomSaveJButton)
                .addContainerGap())
        );

        rentalJTabbedPane.addTab("New Room", roomRentalJPanel);

        editRentalIdJLabel.setText("Rental ID:");

        editRentalIdJTextField.setEditable(false);

        editAddressDetailsJLabel.setText("Rental Address:");

        editPriceJLabel.setText("Weekly Price: $");

        editRoomJLabel.setText("Number of Rooms:");

        editBathroomJLabel.setText("Number of Bathrooms:");

        editFurnishedJLabel.setText("Rental Furnished? :");

        editGarageJLabel.setText("Garage Space? :");

        editPetsJLabel.setText("Pets Allowed? :");

        editCouplesJLabel.setText("Couples Allowed? :");

        editAttBathroomJLabel.setText("Attached Bathroom? :");

        editRentalDescJLabel.setText("Rental Description:");

        editRentalDescJTextArea.setColumns(20);
        editRentalDescJTextArea.setRows(5);
        editRentalDescJScrollPane.setViewportView(editRentalDescJTextArea);

        editFurnishedJComboBox.setModel(new DefaultComboBoxModel<>(new String[] { "Please Select a Value...", "True", "False" }));

        editCoupleJComboBox.setModel(new DefaultComboBoxModel<>(new String[] { "Please Select a Value...", "True", "False" }));

        editGarageJComboBox.setModel(new DefaultComboBoxModel<>(new String[] { "Please Select a Value...", "True", "False" }));

        editAttBathroomJComboBox.setModel(new DefaultComboBoxModel<>(new String[] { "Please Select a Value...", "True", "False" }));

        editPetJComboBox.setModel(new DefaultComboBoxModel<>(new String[] { "Please Select a Value...", "True", "False" }));

        editUpdateJButton.setText("Update");

        clearEditFormJBtn.setText("Clear");

        deleteRentalJBtn.setText("Delete Rental");

        GroupLayout editRentalJPanelLayout = new GroupLayout(editRentalJPanel);
        editRentalJPanel.setLayout(editRentalJPanelLayout);
        editRentalJPanelLayout.setHorizontalGroup(editRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(editRentalJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(editRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(editRentalJPanelLayout.createSequentialGroup()
                        .addComponent(editUpdateJButton)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(clearEditFormJBtn)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(deleteRentalJBtn))
                    .addGroup(editRentalJPanelLayout.createSequentialGroup()
                        .addGroup(editRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(editRentalDescJScrollPane, GroupLayout.PREFERRED_SIZE, 582, GroupLayout.PREFERRED_SIZE)
                            .addGroup(editRentalJPanelLayout.createSequentialGroup()
                                .addComponent(editRentalIdJLabel)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(editRentalIdJTextField, GroupLayout.PREFERRED_SIZE, 60, GroupLayout.PREFERRED_SIZE))
                            .addGroup(editRentalJPanelLayout.createSequentialGroup()
                                .addComponent(editAddressDetailsJLabel)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(editAddressDetailsJTextField, GroupLayout.PREFERRED_SIZE, 420, GroupLayout.PREFERRED_SIZE))
                            .addGroup(editRentalJPanelLayout.createSequentialGroup()
                                .addGroup(editRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                    .addGroup(editRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                        .addGroup(editRentalJPanelLayout.createSequentialGroup()
                                            .addComponent(editRoomJLabel)
                                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(editRoomJTextField, GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE))
                                        .addGroup(editRentalJPanelLayout.createSequentialGroup()
                                            .addComponent(editPriceJLabel)
                                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(editPriceJTextField)))
                                    .addGroup(editRentalJPanelLayout.createSequentialGroup()
                                        .addComponent(editBathroomJLabel)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(editBathroomJTextField, GroupLayout.PREFERRED_SIZE, 35, GroupLayout.PREFERRED_SIZE)))
                                .addGap(53, 53, 53)
                                .addGroup(editRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                    .addGroup(editRentalJPanelLayout.createSequentialGroup()
                                        .addComponent(editPetsJLabel)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(editPetJComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                    .addGroup(editRentalJPanelLayout.createSequentialGroup()
                                        .addComponent(editGarageJLabel)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(editGarageJComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(editAttBathroomJLabel)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(editAttBathroomJComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                    .addGroup(editRentalJPanelLayout.createSequentialGroup()
                                        .addComponent(editFurnishedJLabel)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(editFurnishedJComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(editCouplesJLabel)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(editCoupleJComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))))
                            .addComponent(editRentalDescJLabel))
                        .addGap(0, 86, Short.MAX_VALUE)))
                .addContainerGap())
        );
        editRentalJPanelLayout.setVerticalGroup(editRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(editRentalJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(editRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(editRentalIdJLabel)
                    .addComponent(editRentalIdJTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(editRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(editAddressDetailsJLabel)
                    .addComponent(editAddressDetailsJTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(editRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(editPriceJLabel)
                    .addComponent(editPriceJTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(editFurnishedJLabel)
                    .addComponent(editCouplesJLabel)
                    .addComponent(editFurnishedJComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(editCoupleJComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(editRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(editRoomJLabel)
                    .addComponent(editRoomJTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(editGarageJLabel)
                    .addComponent(editAttBathroomJLabel)
                    .addComponent(editGarageJComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(editAttBathroomJComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(editRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(editBathroomJLabel)
                    .addComponent(editBathroomJTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(editPetsJLabel)
                    .addComponent(editPetJComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(editRentalDescJLabel)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editRentalDescJScrollPane, GroupLayout.PREFERRED_SIZE, 183, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addGroup(editRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(editUpdateJButton)
                    .addComponent(clearEditFormJBtn)
                    .addComponent(deleteRentalJBtn))
                .addContainerGap())
        );

        rentalJTabbedPane.addTab("Edit Rental", editRentalJPanel);

        displayRentalJTable.setModel(new DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Rental Id", "Address", "Price", "Furnished", "Rooms", "Bathrooms", "Garage", "Pets", "Couples", "Att. Bathroom", "Description"
            }
        ) {
            Class[] types = new Class [] {
                String.class, String.class, Double.class, Boolean.class, Integer.class, Integer.class, Boolean.class, Boolean.class, Boolean.class, Boolean.class, String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        displayRentalJTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(displayRentalJTable);

        exportRentalsJBtn.setText("Export to CSV");

        GroupLayout displayRentalJPanelLayout = new GroupLayout(displayRentalJPanel);
        displayRentalJPanel.setLayout(displayRentalJPanelLayout);
        displayRentalJPanelLayout.setHorizontalGroup(displayRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, GroupLayout.DEFAULT_SIZE, 784, Short.MAX_VALUE)
            .addGroup(displayRentalJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(exportRentalsJBtn)
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        displayRentalJPanelLayout.setVerticalGroup(displayRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(displayRentalJPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane3, GroupLayout.PREFERRED_SIZE, 383, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addComponent(exportRentalsJBtn)
                .addContainerGap())
        );

        rentalJTabbedPane.addTab("Display All Rentals", displayRentalJPanel);

        getContentPane().add(rentalJTabbedPane, BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RentalGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RentalGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RentalGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RentalGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RentalGUI().setVisible(true);
            }
        });       
    }
    
    @Override //Overridden method for determining which tab is selected and what action to take based on the selected tab.
    public void stateChanged(ChangeEvent tabChangeEvent)
    {
        JTabbedPane selectedTab = (JTabbedPane) tabChangeEvent.getSource();
        int index = selectedTab.getSelectedIndex();
        
        if(index == 1) //Whole Rental (New House) tab, generates and sets the rental ID and then increments the static variable rentalIdNum in the Rental class
        {                                      
            setIdWholeRentalTab();
        }
        else if(index == 2) //Room Rental tab, generates and sets the rental ID and then increments the static variable rentalIdNum in the Rental class
        {
            setIdRoomRentalTab();
        }
        else if(index == 3) //Edit rental tab. Checks for a rental exists before letting the user search for a rental and editing it.
        {
            
            if(enteredRental.isEmpty())
            {
                JOptionPane.showMessageDialog(null, "You must enter a rental before using this tab"); //Message displayed if a rental is not initialized
                selectedTab.setSelectedIndex(0); //Returns user back to the welcome tab
            }
            else
            {
                rentalSearch();
            }
        }
        else if(index == 4) //Display rental tab checks for a rental exists before displaying it.
        {
            if(enteredRental.isEmpty())
            {
                JOptionPane.showMessageDialog(null, "You must enter a rental before using this tab"); //Message displayed if a rental is not initialized
                selectedTab.setSelectedIndex(0); //Returns user back to the welcome tab
            }
            else
            {
                setDisplayTableRental();
            }
        }
    }
    
    @Override //Overridden method for button actions
    public void actionPerformed(ActionEvent btnPressed)
    {
        Object btnPressedSource = btnPressed.getSource(); //btnPressedSource variable to hold the button source, used for determing what action to take for the different buttons.
        
        if(btnPressedSource == wholeSaveJButton) //Save button present on the Whole Rental tab
        {
            tryCatchWholeRentalMethod();
        }
        else if(btnPressedSource == roomSaveJButton) //Save button present on the Room Rental tab
        {
            tryCatchRoomRentalMethod();                    
        }
        else if(btnPressedSource == editUpdateJButton) //Section for the update button in the edit rental tab.
        {
            editUpdateRentalSaveBtnMethod();
        }
        else if(btnPressedSource == clearEditFormJBtn) //Clears the edit rental form and allows the user to search for a new rental
        {
            enableEditRentalFields();
            clearUpdateTabForm();
            rentalSearch();
        }
        else if(btnPressedSource == deleteRentalJBtn) //Rental deletion button and corresponding method
        {
            rentalDeletionConfirmation();
        }
        else if(btnPressedSource == exportRentalsJBtn)
        {
            try
            {
                exportRentalCsv();
            }
            catch(IOException ex)
            {
                
            }
            
        }
        else if(btnPressedSource == exitJButton) //Listens for the exit button being pressed
        {
            systemExit();
        }
    }
    
    //RentalGUI methods
    
    //New rental (whole and room) tab methods
    public void setIdWholeRentalTab() //Method sets rental ID in the Whole Rental tab
    {
        wholeRentalIdJTextField.setText(WHOLE_RENTAL_ID_PREFIX + Integer.toString(Rental.rentalIdNum));                
    }
        
    public void setIdRoomRentalTab() //Method sets rental ID in the Room Rental tab
    {
        roomRentalIdJTextField.setText(ROOM_RENTAL_ID_PREFIX + Integer.toString(Rental.rentalIdNum));          
    }
    
    public void tryCatchWholeRentalMethod() //Method called when save button has been pressed in the Whole Rental tab
    {
        try
        {   //Try block calls method which checks address and description field has data.
            wholeRentalTextFieldDataCheck();                                                                        
        }
        catch(NullPointerException ex)
        {
            //Method called if a null exception is encountered on the number fields.
            wholeRentalEmptyNumberException();
        }
        catch(NumberFormatException ex)
        {
            //Method called if an incorrect number format exception is encountered on the number fields.
            rentalWrongNumberFormatException();
        }
    }
    
    public void wholeRentalTextFieldDataCheck() //Called in subsequent method. Checks for empty address and description fields
    {
        //If else that checks the address and description fields are not empty
        if(wholeAddressDetailsJTextField.getText().isEmpty() || wholeAddressDetailsJTextField.getText().trim().equals(""))
        {
            JOptionPane.showMessageDialog(null, "Please enter an address for the rental");
            wholeAddressDetailsJTextField.requestFocus();
        }
        else if(wholeRentalDescJTextArea.getText().isEmpty() || wholeRentalDescJTextArea.getText().trim().equals(""))
        {
            JOptionPane.showMessageDialog(null, "Please enter a description for the rental");
            wholeRentalDescJTextArea.requestFocus();
        }
        else
        {
            wholeRentalComboBoxDataCheck(); //If the fields have data, the combo boxes are checked next
        }
    }
    
    public void wholeRentalComboBoxDataCheck() //Called in subsequent method. Checks comboboxes have been selected
    {
        if(wholeFurnishedJComboBox.getSelectedIndex() == 0)
        {
            JOptionPane.showMessageDialog(null, "Please select if the rental is furished");
            wholeFurnishedJComboBox.requestFocus();
        }
        else if(wholeGarageJComboBox.getSelectedIndex() == 0)
        {
            JOptionPane.showMessageDialog(null, "Please select if the rental has a garage");
            wholeGarageJComboBox.requestFocus();
        }
        else if(wholePetsJComboBox.getSelectedIndex() == 0)
        {
            JOptionPane.showMessageDialog(null, "Please select if the rental allows pets");
        }
        else
        {
            saveWholeRental(); //Method called to get data from fields and assign to variables.
            //Once data is assigned, new object is created and assigned to an Object variable
            Rental aNewWholeRental = new WholeRental(rentalIdString, weeklyPrice, addressDetails, rentalDescription, rentalFurnished, numRooms, numBathrooms, garageSpace, petsAllowed);
            enteredRental.add(aNewWholeRental);
            ++Rental.rentalIdNum;
            clearWholeRentalForm(); //Method called to clear the form
        }
    }
    
    public void saveWholeRental() //Method designed to assign entered data to variables for Whole Rentals
    {   
        String addressDetails = "";
        
        rentalIdString = wholeRentalIdJTextField.getText();
        addressDetails = wholeAddressDetailsJTextField.getText();
        this.addressDetails = addressDetails.replace(",", ""); //Takes in entered address details and replaces any entered commas with empty string
        weeklyPrice = Double.parseDouble(wholePriceJTextField.getText());
        numRooms = Integer.parseInt(wholeRoomJTextField.getText());
        numBathrooms = Integer.parseInt(wholeBathroomJTextField.getText());
        rentalFurnished = wholeRentalIsFurnished();
        garageSpace = isThereAGarage();
        petsAllowed = arePetsAllowed();
        rentalDescription = wholeRentalDescJTextArea.getText();
    }
    
    public void wholeRentalEmptyNumberException() //Exception catch method for empty fields for the Price, Number of Rooms/Bathrooms. Displays a message and returns focus to the empty field.
    {
        if(wholePriceJTextField.getText() == null || wholePriceJTextField.getText().isEmpty())
        {
            JOptionPane.showMessageDialog(null, "Please enter the price for the rental.");
            wholePriceJTextField.requestFocus();
        }
        else if(wholeRoomJTextField.getText() == null || wholeRoomJTextField.getText().isEmpty())
        {
            JOptionPane.showMessageDialog(null, "Please enter the number of rooms for the rental.");
            wholeRoomJTextField.requestFocus();
        }
        else
        {
            JOptionPane.showMessageDialog(null, "Please enter the number of bathrooms for the rental.");
            wholeBathroomJTextField.requestFocus(); 
        }
    }
    
    public boolean wholeRentalIsFurnished() //Method to assign the boolean value to the rentalFurnished variable based on combo box selection
    {
        boolean rentalIsFurnished = false;
        if(wholeFurnishedJComboBox.getSelectedIndex() == 1)
        {
            rentalIsFurnished = true;
        }
        else if(wholeFurnishedJComboBox.getSelectedIndex() == 2)
        {
            rentalIsFurnished = false;
        }
        return rentalIsFurnished;
    }
    
    public boolean isThereAGarage() //Method to assign the boolean value to the garageSpace variable based on combo box selection
    {
        boolean isThereAGarage = false;
        
        if(wholeGarageJComboBox.getSelectedIndex() == 1)
        {
            isThereAGarage = true;
        }
        return isThereAGarage;
    }
    
    public boolean arePetsAllowed() //Method to assign the boolean value to the petsAllowed variable based on combo box selection
    {
        boolean arePetsAllowed = false;
        if(wholePetsJComboBox.getSelectedIndex() == 1)
        {
            arePetsAllowed = true;
        }
        return arePetsAllowed;
    }
    
    public void clearWholeRentalForm() //Method will clear the New House Rental (Whole Rental) tab for a new entry. Generates a new id as well.
    {
        wholeRentalIdJTextField.setText(WHOLE_RENTAL_ID_PREFIX + Integer.toString(Rental.rentalIdNum));
        
        wholeAddressDetailsJTextField.setText("");
        wholePriceJTextField.setText("");
        wholeRoomJTextField.setText("");
        wholeBathroomJTextField.setText("");
        wholeFurnishedJComboBox.setSelectedIndex(0);
        wholeGarageJComboBox.setSelectedIndex(0);
        wholePetsJComboBox.setSelectedIndex(0);
        wholeRentalDescJTextArea.setText("");
    }
    
    public void tryCatchRoomRentalMethod() //Method called when save button has been pressed in the Room Rental tab
    {
        try
        {
            //Try block calls method which checks address and description field has data.
            roomRentalTextFieldDataCheck();
        }
        catch(NullPointerException ex) //Exception catch for empty fields for the Price. Displays a message and returns focus to the empty field.
        {
            //Catch block for an empty Price field
            roomPriceEmpty();
        }
        catch(NumberFormatException ex)
        {
            //Method called if an incorrect number format exception is encountered on the number fields.
            rentalWrongNumberFormatException();
        }
    }
    
    public void roomRentalTextFieldDataCheck() //Called in subsequent method. Checks for empty address and description fields
    {
        //If else that checks the address and description fields are not empty
        if(roomAddressDetailsJTextField.getText().isEmpty() || roomAddressDetailsJTextField.getText().trim().equals(""))
        {
            JOptionPane.showMessageDialog(null, "Please enter an address for the rental");
            roomAddressDetailsJTextField.requestFocus();   
        }
        else if(roomRentalDescJTextArea.getText().isEmpty() || roomRentalDescJTextArea.getText().trim().equals(""))
        {
            JOptionPane.showMessageDialog(null, "Please enter a description for the rental");
            roomRentalDescJTextArea.requestFocus();
        }
        else
        {
            roomRentalComboBoxDataCheck();
        }
    }
    
    public void roomRentalComboBoxDataCheck() //Called in subsequent method. Checks comboboxes have been selected
    {
        if(roomFurnishedJComboBox.getSelectedIndex() == 0)
        {
            JOptionPane.showMessageDialog(null, "Please select if the rental is furished");
            roomFurnishedJComboBox.requestFocus();
        }
        else if(roomCouplesJComboBox.getSelectedIndex() == 0)
        {
            JOptionPane.showMessageDialog(null, "Please select if the rental allows couples");
            roomCouplesJComboBox.requestFocus();
        }
        else if(roomAttBathrromJComboBox.getSelectedIndex() == 0)
        {
            JOptionPane.showMessageDialog(null, "Please select if the rental has an attached bathroom");
            roomAttBathrromJComboBox.requestFocus();
        }
        else
        {
            saveRoomRental();                
            //Once data is assigned, new object is created and assigned to an Object variable
            Rental aNewRoom = new RoomRental(rentalIdString, weeklyPrice, addressDetails, rentalDescription, rentalFurnished, couplesAllowed, attachedBathroom);
            enteredRental.add(aNewRoom);
            ++Rental.rentalIdNum;
            clearRoomRentalForm(); //Method called to clear the form
        }
    }
    
    public void saveRoomRental() //Method designed to assign entered date to variables for Room Rentals
    {
        String addressDetails = "";
        
        rentalIdString = roomRentalIdJTextField.getText();            
        addressDetails = roomAddressDetailsJTextField.getText();
        this.addressDetails = addressDetails.replace(",", ""); //Takes in entered address details and replaces any entered commas with empty string
        weeklyPrice = Double.parseDouble(roomPriceJTextField.getText());
        rentalFurnished = roomRentalIsFurnished();
        couplesAllowed = areCouplesAllowed();
        attachedBathroom = isBathroomAttached();
        rentalDescription = roomRentalDescJTextArea.getText();
    }
    
    public void clearRoomRentalForm() //Method will clear the New Room Rental (Room Rental) tab for a new entry. Generates a new id as well.
    {
        roomRentalIdJTextField.setText(ROOM_RENTAL_ID_PREFIX + Integer.toString(Rental.rentalIdNum));
        
        roomAddressDetailsJTextField.setText("");
        roomPriceJTextField.setText("");
        roomFurnishedJComboBox.setSelectedIndex(0);
        roomCouplesJComboBox.setSelectedIndex(0);
        roomAttBathrromJComboBox.setSelectedIndex(0);
        roomRentalDescJTextArea.setText("");
    }   
    
    public void roomPriceEmpty() //Method is called in the catch block of tryCatchRoomRentalMethod method. Returns an error message if the price is empty
    {
        JOptionPane.showMessageDialog(null, "Please enter the weekly price for the rental.");
        roomPriceJTextField.requestFocus();
    }
    
    public boolean roomRentalIsFurnished() //Method to assign the boolean value to the rentalFurnished variable based on combo box selection
    {
        boolean isFurnished = false;
        if(roomFurnishedJComboBox.getSelectedIndex() == 1)
        {
            isFurnished = true;
        }
        else if(roomFurnishedJComboBox.getSelectedIndex() == 2)
        {
            isFurnished = false;
        }
        return isFurnished;
    }
    
    public boolean areCouplesAllowed() //Method to assign the boolean value to the couplesAllowed variable based on combo box selection
    {
        boolean areCouplesAllowed = false;
        if(roomCouplesJComboBox.getSelectedIndex() == 1)
        {
            areCouplesAllowed = true;
        }
        return areCouplesAllowed;
    }
    
    public boolean isBathroomAttached() //Method to assign the boolean value to the attachedBathroom variable based on combo box selection
    {
        boolean isBathroomAttached = false;
        if(roomAttBathrromJComboBox.getSelectedIndex() == 1)
        {
            isBathroomAttached = true;
        }
        return isBathroomAttached;
    }
    
    public void rentalWrongNumberFormatException() //Method generates an error message if a Number Format Exception is encountered
    {
        JOptionPane.showMessageDialog(null, "Please ensure you enter numbers in the correct format. E.g. 100 or 10.5");
    }
    
    //Rental edit and search methods
    public void rentalSearch() //Method allows the user to search for a saved rental
    {
        String rentalIdSearchTerm; //Local variable to hold user search term
        boolean searchResultFound = false;
                
        rentalIdSearchTerm = JOptionPane.showInputDialog(null, "Enter a rental ID to search for:"); //Prompts user for an ID to search for a rental
        
        try
        {
            for(int i = 0; i < enteredRental.size(); ++i)
            {
                if(enteredRental.get(i).getRentalId().contains(rentalIdSearchTerm) && enteredRental.get(i).getRentalId().startsWith(WHOLE_RENTAL_ID_PREFIX)) //Checks entered ID against the entered rental previously
                {
                    searchResultFound = true;
                    rentalIndexLocation = i;
                    editWholeRental(); //Method called to fill in fields with information and with Whole Rental specific fields
                }
                else if(enteredRental.get(i).getRentalId().contains(rentalIdSearchTerm) && enteredRental.get(i).getRentalId().startsWith(ROOM_RENTAL_ID_PREFIX))
                {
                    searchResultFound = true;
                    rentalIndexLocation = i;
                    editRoomRental(); //Method called if a class cast exception is encountered and fills in fields with information and with Room Rental specific fields
                }
            }
        }
        catch(Exception ex)
        {
            clearUpdateTabForm();
        }
                
        if(searchResultFound == false)
        {
            JOptionPane.showMessageDialog(null, "No rental found with that ID");
        }
    }
    
    public void editWholeRental() //Method designed to set the data fields with previously entered data of the rental in the Edit Rental Tab - Whole Rentals
    {        
        try{
            editCoupleJComboBox.setEnabled(false);
            editAttBathroomJComboBox.setEnabled(false);
        
            editRentalIdJTextField.setText(enteredRental.get(rentalIndexLocation).getRentalId());
            editAddressDetailsJTextField.setText(enteredRental.get(rentalIndexLocation).getAddressDetails());
            editPriceJTextField.setText(String.format("%.2f", (enteredRental.get(rentalIndexLocation).getWeeklyPrice())));
            editRentalDescJTextArea.setText(enteredRental.get(rentalIndexLocation).getRentalDescription());
            editFurnishedJComboBox.setSelectedIndex(setFurnishedComboBox());
        
            if(enteredRental.get(rentalIndexLocation) instanceof WholeRental)
            {
                wh1 = (WholeRental) enteredRental.get(rentalIndexLocation);
                editRoomJTextField.setText(Integer.toString(wh1.getNumberOfRooms()));
                editBathroomJTextField.setText(Integer.toString(wh1.getNumberOfBathrooms()));
                editGarageJComboBox.setSelectedIndex(setGarageComboBox());
                editPetJComboBox.setSelectedIndex(setPetsComboBox());
            }
        }
        catch(Exception ex)
        {
            JOptionPane.showMessageDialog(null, ex);
        }
    }
    
    public int setFurnishedComboBox() //Method is called in editWholeRental method and sets the combo box value based on getRentalFurnished value (true or false).
    {
        int selectedIndex = 0;
        if(enteredRental.get(rentalIndexLocation).getRentalFurnished() == true)
        {
            selectedIndex = 1;
        }
        else if(enteredRental.get(rentalIndexLocation).getRentalFurnished() == false)
        {
            selectedIndex = 2;
        }
        return selectedIndex;
    }
    
    public int setGarageComboBox() //Method is called in editWholeRental method and sets the combo box value based on getGarageSpace value (true or false).
    {
        int selectedIndex = 0;
        if(wh1.getGarageSpace() == true)
        {
            selectedIndex = 1;
        }
        else if(wh1.getGarageSpace() == false)
        {
            selectedIndex = 2;
        }
        return selectedIndex;
    }
    
    public int setPetsComboBox() //Method is called in editWholeRental method and sets the combo box value based on getPetsAllowed value (true or false).
    {
        int selectedIndex = 0;
        if(wh1.getPetsAllowed() == true)
        {
            selectedIndex = 1;
        }
        else if(wh1.getPetsAllowed() == false)
        {
            selectedIndex = 2;
        }
        return selectedIndex;
    }
    
    public void editRoomRental() //Method designed to set the data fields with previously entered data of the rental Edit Rental Tab - Room Rentals
    {
        editRoomJTextField.setEnabled(false);
        editBathroomJTextField.setEnabled(false);
        editGarageJComboBox.setEnabled(false);
        editPetJComboBox.setEnabled(false);
        
        editRentalIdJTextField.setText(enteredRental.get(rentalIndexLocation).getRentalId());
        editAddressDetailsJTextField.setText(enteredRental.get(rentalIndexLocation).getAddressDetails());
        editPriceJTextField.setText(String.format("%.2f",(enteredRental.get(rentalIndexLocation).getWeeklyPrice())));
        editRentalDescJTextArea.setText(enteredRental.get(rentalIndexLocation).getRentalDescription());
        editFurnishedJComboBox.setSelectedIndex(setFurnishedComboBox());
        
        if(enteredRental.get(rentalIndexLocation) instanceof RoomRental)
        {
            rr1 = (RoomRental) enteredRental.get(rentalIndexLocation);
            editCoupleJComboBox.setSelectedIndex(setCoupleComboBox());
            editAttBathroomJComboBox.setSelectedIndex(setAttBathroomComboBox());
        }
    }
    
    public int setCoupleComboBox() //Method is called in editWholeRental method and sets the combo box value based on getCouplesAllowed value (true or false).
    {
        int selectedIndex = 0;
        if(rr1.getCouplesAllowed() == true)
        {
            selectedIndex = 1;
        }
        else if(rr1.getCouplesAllowed() == false)
        {
            selectedIndex = 2;
        }
        return selectedIndex;
    }
    
    public int setAttBathroomComboBox() //Method is called in editWholeRental method and sets the combo box value based on getAttachedBathroom value (true or false).
    {
        int selectedIndex = 0;
        if(rr1.getAttachedBathroom() == true)
        {
            selectedIndex = 1;
        }
        else if(rr1.getAttachedBathroom() == false)
        {
            selectedIndex = 2;
        }
        return selectedIndex;
    }
    
    public void editUpdateRentalSaveBtnMethod() //Method is called when save button in edit rental tab
    {
        if(editRentalIdJTextField.getText().startsWith(WHOLE_RENTAL_ID_PREFIX)) //Checks what the rental ID in the field starts with to ensure correct object is updated.
        {
            try
            {                                         
                //Try block calls a method
                editUpdateWholeTextFieldDataCheck();
            }
            catch(NullPointerException ex) //Exception catch for empty or null number fields
            {
                //Catch block for an empty number fields
                editUpdateWholeRentalNullNumberException();                    
            }
            catch(NumberFormatException ex)
            {
                editUpdateRentalNumberFormatException();
            }
        }
        else if(editRentalIdJTextField.getText().startsWith(ROOM_RENTAL_ID_PREFIX))
        {
            try
            {
                //Try block calls a method
                editUpdateRoomTextFieldDataCheck();               
            }
            catch(NullPointerException ex)
            {
                //Catch block for an empty Price field
                editUpdateRoomRentalPriceException();
            }
            catch(NumberFormatException ex)
            {
                editUpdateRentalNumberFormatException();
            }
        }
    }
    
    public void editUpdateWholeTextFieldDataCheck() //Method checks for empty address and description fields before calling the editUpdateWholeRental.
    {
        if(editAddressDetailsJTextField.getText().isEmpty() || editAddressDetailsJTextField.getText().trim().equals("")) //If else to ensure data existis in the address and description fields
        {
            JOptionPane.showMessageDialog(null, "The rental address must not be empty");
            editAddressDetailsJTextField.requestFocus();
        }
        else if(editRentalDescJTextArea.getText().isEmpty() || editRentalDescJTextArea.getText().trim().equals(""))
        {
            JOptionPane.showMessageDialog(null, "The rental description field must not be empty");
            editRentalDescJTextArea.requestFocus();
        }
        else
        {
            editUpdateWholeComboBoxDataCheck();
        }
    }
    
    public void editUpdateWholeComboBoxDataCheck() //Method checks that combo boxes have been selected
    {
        if(editFurnishedJComboBox.getSelectedIndex() == 0)
        {
            JOptionPane.showMessageDialog(null, "Please select if the rental is furnished");
            editFurnishedJComboBox.requestFocus();
        }
        else if(editGarageJComboBox.getSelectedIndex() == 0)
        {
            JOptionPane.showMessageDialog(null, "Please select if the rental has a garage");
            editGarageJComboBox.requestFocus();
        }
        else if(editPetJComboBox.getSelectedIndex() == 0)
        {
            JOptionPane.showMessageDialog(null, "Please select if the rental allows pets");
            editPetJComboBox.requestFocus();
        }
        else
        {
            //Call of method to assign data from fields to variables
            editUpdateWholeRental();
            //Data put into an object which is assigned to the object variable
            Rental aNewHouse = new WholeRental(rentalIdString, weeklyPrice, addressDetails, rentalDescription, rentalFurnished, numRooms, numBathrooms, garageSpace, petsAllowed);
            enteredRental.set(rentalIndexLocation, aNewHouse);
            rentalIndexLocation = 0;
            clearUpdateTabForm();
            rentalSearch();
        }
    }
    
    public void editUpdateWholeRental() //Method assigns data to global variables for whole rental entries
    {
        rentalIdString = editRentalIdJTextField.getText();
        addressDetails = editAddressDetailsJTextField.getText();
        weeklyPrice = Double.parseDouble(editPriceJTextField.getText());
        numRooms = Integer.parseInt(editRoomJTextField.getText());
        numBathrooms = Integer.parseInt(editBathroomJTextField.getText());
        rentalFurnished = getEditRentalFurnished();
        garageSpace = getEditGarageSpace();
        petsAllowed = getEditPetsAllowed();
        rentalDescription = editRentalDescJTextArea.getText();
    }
    
    public boolean getEditRentalFurnished() //Returns boolean value for the rentalFurnished variable depending on the combo box value
    {
        boolean isRentalFurnished = false;
        if(editFurnishedJComboBox.getSelectedIndex() == 1)
        {
            isRentalFurnished = true;
        }
        else if(editFurnishedJComboBox.getSelectedIndex() == 2)
        {
            isRentalFurnished = true;
        }
        return isRentalFurnished;
    }
    
    public boolean getEditGarageSpace() //Returns boolean value for the garageSpace variable depending on the combo box value
    {
        boolean isThereGarage = false;
        if(editGarageJComboBox.getSelectedIndex() == 1)
        {
            isThereGarage = true;
        }
        else if(editGarageJComboBox.getSelectedIndex() == 2)
        {
            isThereGarage = false;
        }
        return isThereGarage;
    }
    
    public boolean getEditPetsAllowed() //Returns boolean value for the petsAllowed variable depending on the combo box value
    {
        boolean petsAllowed = false;
        if(editPetJComboBox.getSelectedIndex() == 1)
        {
            petsAllowed = true;
        }
        else if(editPetJComboBox.getSelectedIndex() == 2)
        {
            petsAllowed = false;
        }
        return petsAllowed;
    }    
    
    public void editUpdateWholeRentalNullNumberException() //Method for catch block for null number fields. Gives error message and returns focus to specific field
    {
        if(editPriceJTextField.getText() == null || editPriceJTextField.getText().isEmpty())
        {
            JOptionPane.showMessageDialog(null, "Please enter the price for the rental.");
            editPriceJTextField.requestFocus();
        }
        else if(editRoomJTextField.getText() == null || editRoomJTextField.getText().isEmpty())
        {
            JOptionPane.showMessageDialog(null, "Please enter the number of rooms for the rental.");
            editRoomJTextField.requestFocus();
        }
        else if(editBathroomJTextField.getText() == null || editBathroomJTextField.getText().isEmpty())
        {
            JOptionPane.showMessageDialog(null, "Please enter the number of bathrooms for the rental.");
            editBathroomJTextField.requestFocus(); 
        }
    }
    
    public void editUpdateRoomTextFieldDataCheck() //Method checks for empty address and description fields before calling the editUpdateRoomRental.
    {
        if(editAddressDetailsJTextField.getText().isEmpty() || editAddressDetailsJTextField.getText().trim().equals("")) //If else to ensure data existis in the address and description fields
        {
            JOptionPane.showMessageDialog(null, "The rental address must not be empty");
            editAddressDetailsJTextField.requestFocus();
        }
        else if(editRentalDescJTextArea.getText().isEmpty() || editRentalDescJTextArea.getText().trim().equals(""))
        {
            JOptionPane.showMessageDialog(null, "The rental description field must not be empty");
            editRentalDescJTextArea.requestFocus();
        }
        else //If data is found in the address and description fields, the system moves onto checking the combo boxes for data.
        {
            editUpdateRoomComboBoxDataCheck();
        }
    }
    
    public void editUpdateRoomComboBoxDataCheck() //Method called in subsequent method. Checks combo boxes have been selected.
    {
        if(editFurnishedJComboBox.getSelectedIndex() == 0)
        {
            JOptionPane.showMessageDialog(null, "Please select if the rental is furnished");
            editFurnishedJComboBox.requestFocus();
        }
        else if(editCoupleJComboBox.getSelectedIndex() == 0)
        {
            JOptionPane.showMessageDialog(null, "Please select if the rental allows couples");
            editCoupleJComboBox.requestFocus();
        }
        else if(editAttBathroomJComboBox.getSelectedIndex() == 0)
        {
            JOptionPane.showMessageDialog(null, "Please select if the rental has an attached bathroom");
            editAttBathroomJComboBox.requestFocus();
        }
        else
        {
            //Call of method to assign data from fields to variables
            editUpdateRoomRental();
            //Data put into an object which is assigned to the object variable
            Rental aNewRoomRental = new RoomRental(rentalIdString, weeklyPrice, addressDetails, rentalDescription, rentalFurnished, couplesAllowed, attachedBathroom);
            enteredRental.set(rentalIndexLocation, aNewRoomRental);
            rentalIndexLocation = 0;
            clearUpdateTabForm();
            rentalSearch();
        }
    }
    
    public void editUpdateRoomRental() //Method assigns data to global variables for room rental entries
    {
        rentalIdString = editRentalIdJTextField.getText();
        addressDetails = editAddressDetailsJTextField.getText();
        weeklyPrice = Double.parseDouble(editPriceJTextField.getText());
        rentalFurnished = getEditRentalFurnished();
        couplesAllowed = getEditCouplesAllowed();
        attachedBathroom = getEditAttBathroom();
        rentalDescription = editRentalDescJTextArea.getText();
    }
    
    public void editUpdateRoomRentalPriceException() //Method for catch block for null number fields. Gives error message and returns focus to specific field
    {
        if(editPriceJTextField.getText() == null || editPriceJTextField.getText().isEmpty())
        {
            JOptionPane.showMessageDialog(null, "Please enter the price for the rental.");
            editPriceJTextField.requestFocus();
        }
    }
    
    public void editUpdateRentalNumberFormatException() //Method returns a message if incorrect number format exception is encountered
    {
        JOptionPane.showMessageDialog(null, "Please ensure you enter numbers in the correct format. E.g. 100 or 10.5");
    }
    
    public boolean getEditCouplesAllowed() //Returns boolean value for the couplesAllowed variable depending on the combo box value
    {
        boolean couplesAllowed = false;
        if(editCoupleJComboBox.getSelectedIndex() == 1)
        {
            couplesAllowed = true;
        }
        else if(editCoupleJComboBox.getSelectedIndex() == 2)
        {
            couplesAllowed = false;
        }
        return couplesAllowed;
    }
    
    public boolean getEditAttBathroom() //Returns boolean value for the attachedBathroom variable depending on the combo box value
    {
        boolean bathroomAttached = false;
        if(editAttBathroomJComboBox.getSelectedIndex() == 1)
        {
            bathroomAttached = true;
        }
        else if(editAttBathroomJComboBox.getSelectedIndex() == 2)
        {
            bathroomAttached = false;
        }
        return bathroomAttached;
    }
    
    public void clearUpdateTabForm() //Clears the edit tab fields
    {
        editRentalIdJTextField.setText("");
        editAddressDetailsJTextField.setText("");
        editPriceJTextField.setText("");
        editRoomJTextField.setText("");
        editBathroomJTextField.setText("");
        editRentalDescJTextArea.setText("");
        editFurnishedJComboBox.setSelectedIndex(0);
        editGarageJComboBox.setSelectedIndex(0);
        editPetJComboBox.setSelectedIndex(0);
        editFurnishedJComboBox.setSelectedIndex(0);
        editCoupleJComboBox.setSelectedIndex(0);
        editAttBathroomJComboBox.setSelectedIndex(0);
    }
    
    //Display all tab methods
    public void setDisplayTableRental() //Method populates data into the display all rentals tab
    {
        for(int i = 0; i < enteredRental.size(); i++)
        {
            if(enteredRental.get(i) instanceof WholeRental)
            {
                rentalIndexLocation = i;
                displayRentalJTable.setValueAt(enteredRental.get(i).getRentalId(), i, 0);
	        displayRentalJTable.setValueAt(enteredRental.get(i).getAddressDetails(), i, 1);
	        displayRentalJTable.setValueAt(enteredRental.get(i).getWeeklyPrice(), i, 2);
	        displayRentalJTable.setValueAt(determineRentalFurnishedTrueFalse(), i, 3);
                displayRentalJTable.setValueAt(enteredRental.get(i).getRentalDescription(), i, 10);
                wh1 = (WholeRental) enteredRental.get(i);
                displayRentalJTable.setValueAt(wh1.getNumberOfRooms(), i, 4);
                displayRentalJTable.setValueAt(wh1.getNumberOfBathrooms(), i, 5);
                displayRentalJTable.setValueAt(wh1.getGarageSpace(), i, 6);
                displayRentalJTable.setValueAt(wh1.getPetsAllowed(), i, 7);
            }
            else if(enteredRental.get(i) instanceof RoomRental)
            {
                rentalIndexLocation = i;
                displayRentalJTable.setValueAt(enteredRental.get(i).getRentalId(), i, 0);
	        displayRentalJTable.setValueAt(enteredRental.get(i).getAddressDetails(), i, 1);
	        displayRentalJTable.setValueAt(enteredRental.get(i).getWeeklyPrice(), i, 2);
	        displayRentalJTable.setValueAt(determineRentalFurnishedTrueFalse(), i, 3);
                displayRentalJTable.setValueAt(enteredRental.get(i).getRentalDescription(), i, 10);
                rr1 = (RoomRental) enteredRental.get(i);
                displayRentalJTable.setValueAt(rr1.getCouplesAllowed(), i, 8);
                displayRentalJTable.setValueAt(rr1.getAttachedBathroom(), i, 9);
            }
        }
    }
    
    public boolean determineRentalFurnishedTrueFalse() //Method determines if the rental is furnished
    {
        boolean isRentalFurnished = false;
        if(enteredRental.get(rentalIndexLocation).getRentalId().startsWith(WHOLE_RENTAL_ID_PREFIX) && enteredRental.get(rentalIndexLocation).getRentalFurnished() == true)
        {
            isRentalFurnished = true;
        }
        else if(enteredRental.get(rentalIndexLocation).getRentalId().startsWith(WHOLE_RENTAL_ID_PREFIX) && enteredRental.get(rentalIndexLocation).getRentalFurnished() == false)
        {
            isRentalFurnished = false;
        }
        else if(enteredRental.get(rentalIndexLocation).getRentalId().startsWith(ROOM_RENTAL_ID_PREFIX) && enteredRental.get(rentalIndexLocation).getRentalFurnished() == true)
        {
            isRentalFurnished = true;
        }
        else
        {
            isRentalFurnished = false;
        }
        return isRentalFurnished;
    }
    
    public void rentalDeletionConfirmation() //Method handles rental deletion from system
    {
        int deleteConfirmation = JOptionPane.showConfirmDialog(null, "Are you sure you wish to delete this rental from the system", "Confirm Deletion", JOptionPane.YES_NO_OPTION); //Displays an option box with yes or no
        if(deleteConfirmation == JOptionPane.YES_OPTION) //If the yes button is pressed, rental is deleted from the system.
        {
            enteredRental.remove(rentalIndexLocation);
            enableEditRentalFields();
            clearUpdateTabForm();
            rentalSearch();
        }
    }
    
    public void enableEditRentalFields() //Method that reenables all fields in the edit rental form
    {
        editRoomJTextField.setEnabled(true);
        editBathroomJTextField.setEnabled(true);
        editFurnishedJComboBox.setEnabled(true);
        editGarageJComboBox.setEnabled(true);
        editPetJComboBox.setEnabled(true);
        editCoupleJComboBox.setEnabled(true);
        editAttBathroomJComboBox.setEnabled(true);
        rentalIndexLocation = 0;
    }
    
    public void exportRentalCsv() throws IOException //Method to export all entered rentals as a CSV file
    {
        File rentalCsvOutput = new File(CSV_FILE_NAME);
        FileWriter fw = new FileWriter(rentalCsvOutput);
        BufferedWriter output = new BufferedWriter(fw);
        
        try
        {
            for(int i = 0; i < enteredRental.size(); i++)
            {
                if(enteredRental.get(i).getRentalId().contains(WHOLE_RENTAL_ID_PREFIX) && enteredRental.get(i) instanceof WholeRental)
                {
                    rentalIndexLocation = i;
                    output.write(enteredRental.get(i).getRentalId() + CSV_SEPERATOR + enteredRental.get(i).getAddressDetails() + CSV_SEPERATOR 
                            + (String.format("%.2f", (enteredRental.get(i).getWeeklyPrice()))) + CSV_SEPERATOR + enteredRental.get(i).getRentalFurnished() + CSV_SEPERATOR
                            + enteredRental.get(i).getRentalDescription() + CSV_SEPERATOR);
                    wh1 = (WholeRental) enteredRental.get(i);
                    output.write(wh1.getNumberOfRooms() + CSV_SEPERATOR + wh1.getNumberOfBathrooms() + CSV_SEPERATOR);
                    output.write(wh1.getGarageSpace() + CSV_SEPERATOR + wh1.getPetsAllowed());
                    output.newLine();
                }
                else if(enteredRental.get(i).getRentalId().contains(ROOM_RENTAL_ID_PREFIX) && enteredRental.get(i) instanceof RoomRental)
                {
                    rentalIndexLocation = i;
                    output.write(enteredRental.get(i).getRentalId() + CSV_SEPERATOR + enteredRental.get(i).getAddressDetails() + CSV_SEPERATOR 
                            + (String.format("%.2f", (enteredRental.get(i).getWeeklyPrice()))) + CSV_SEPERATOR + enteredRental.get(i).getRentalFurnished() + CSV_SEPERATOR
                            + enteredRental.get(i).getRentalDescription() + CSV_SEPERATOR);
                    rr1 = (RoomRental) enteredRental.get(i);
                    output.write(rr1.getCouplesAllowed() + CSV_SEPERATOR + rr1.getAttachedBathroom());
                    output.newLine();
                }
            }
        }
        catch(IOException ex)
        {
            JOptionPane.showMessageDialog(null, ex);
        }
        finally
        {
            output.close();
            fw.close();
            JOptionPane.showMessageDialog(null, "All entered rentals have been exported");
        }
    }
    
    //System exit method
    public void systemExit() //Method handles the exit functions for the system.
    {
        int exitConfirmation = JOptionPane.showConfirmDialog(null, "Are you sure you wish to exit", "Confirm Exit", JOptionPane.YES_NO_OPTION); //Displays an option box with yes or no
        if(exitConfirmation == JOptionPane.YES_OPTION) //If the yes button is pressed, system is exited.
        {
            System.exit(0);
        }
    }
   
    ArrayList<Rental> enteredRental = new ArrayList<>(); //ArrayList declaration
    
    private static String rentalIdString; //String variable to hold the generated rental ID
    private double weeklyPrice; //Double variable to hold the entered price for the rental - applicable for all rentals
    private String addressDetails; //String variable to hold the entered address details for the rental - applicable for all rentals
    private String rentalDescription; //String variable to hold a description of the entered rental - applicable for all rentals
    private boolean rentalFurnished; //Boolean variable to indicate whether the rental is furnished or not - applicable for all rentals
    private int numRooms; //Int variable to hold the number of rooms a Whole rental may contain
    private int numBathrooms; //Int variable to hold the number of bathrooms a Whole rental may contain       
    private boolean garageSpace; //Int variable which holds the chosen selection in a JComboBox - True or False - if a Whole Rental has a garage space or not
    private boolean petsAllowed; //Int variable which holds the chosen selection in a JComboBox - True or False - if a Whole Rental allows pets
    private boolean couplesAllowed; //Int variable which holds the chosen selection in a JComboBox - True or False - if a Room Rental allows for couples
    private boolean attachedBathroom; //Int variable which holds the chosen selection in a JComboBox - True or False - if a Room Rental has an attached bathroom
    private int rentalIndexLocation; //Int variable to hold the index location of a given rental
    private WholeRental wh1; //Object variable - Used for casting Rental object down to access WholeRental specific methods
    private RoomRental rr1; //Object variable - Used for casting Rental object down to access RoomRental specific methods
     
    private final String WHOLE_RENTAL_ID_PREFIX = "W"; //Final String variable to hold the ID prefix for a whole rental ID
    private final String ROOM_RENTAL_ID_PREFIX = "R"; //Final String variable to hold the ID prefix for a room rental ID
    private final String CSV_SEPERATOR = ","; //Final string variable. Used as seperator in CSV export method
    private static final String CSV_FILE_NAME = "\\FSA_Availability.csv"; //Final String for csv file name
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton clearEditFormJBtn;
    private JButton deleteRentalJBtn;
    private JLabel displayRentalJLabel;
    private JPanel displayRentalJPanel;
    private JTable displayRentalJTable;
    private JLabel editAddressDetailsJLabel;
    private JTextField editAddressDetailsJTextField;
    private JComboBox<String> editAttBathroomJComboBox;
    private JLabel editAttBathroomJLabel;
    private JLabel editBathroomJLabel;
    private JTextField editBathroomJTextField;
    private JComboBox<String> editCoupleJComboBox;
    private JLabel editCouplesJLabel;
    private JComboBox<String> editFurnishedJComboBox;
    private JLabel editFurnishedJLabel;
    private JComboBox<String> editGarageJComboBox;
    private JLabel editGarageJLabel;
    private JComboBox<String> editPetJComboBox;
    private JLabel editPetsJLabel;
    private JLabel editPriceJLabel;
    private JTextField editPriceJTextField;
    private JLabel editRentalDescJLabel;
    private JScrollPane editRentalDescJScrollPane;
    private JTextArea editRentalDescJTextArea;
    private JLabel editRentalIdJLabel;
    private JTextField editRentalIdJTextField;
    private JLabel editRentalJLabel;
    private JPanel editRentalJPanel;
    private JLabel editRoomJLabel;
    private JTextField editRoomJTextField;
    private JButton editUpdateJButton;
    private JLabel enterRentalJLabel;
    private JButton exitJButton;
    private JButton exportRentalsJBtn;
    private JLabel jLabel1;
    private JScrollPane jScrollPane1;
    private JScrollPane jScrollPane3;
    private JTable jTable1;
    private JTabbedPane rentalJTabbedPane;
    private JLabel roomAddressDetailsJLabel;
    private JTextField roomAddressDetailsJTextField;
    private JComboBox<String> roomAttBathrromJComboBox;
    private JLabel roomBathroomJLabel;
    private JComboBox<String> roomCouplesJComboBox;
    private JLabel roomCouplesJLabel;
    private JComboBox<String> roomFurnishedJComboBox;
    private JLabel roomFurnishedJLabel;
    private JLabel roomPriceJLabel;
    private JTextField roomPriceJTextField;
    private JLabel roomRentalDescJLabel;
    private JScrollPane roomRentalDescJScrollPane;
    private JTextArea roomRentalDescJTextArea;
    private JLabel roomRentalIdJLabel;
    private JTextField roomRentalIdJTextField;
    private JPanel roomRentalJPanel;
    private JButton roomSaveJButton;
    private JLabel welcomeJLabel;
    private JPanel welcomeJPanel;
    private JLabel wholeAddressDetailsJLabel;
    private JTextField wholeAddressDetailsJTextField;
    private JLabel wholeBathroomJLabel;
    private JTextField wholeBathroomJTextField;
    private JComboBox<String> wholeFurnishedJComboBox;
    private JLabel wholeFurnishedJLabel;
    private JComboBox<String> wholeGarageJComboBox;
    private JLabel wholeGarageJLabel;
    private JComboBox<String> wholePetsJComboBox;
    private JLabel wholePetsJLabel;
    private JLabel wholePriceJLabel;
    private JTextField wholePriceJTextField;
    private JLabel wholeRentalDescJLabel;
    private JScrollPane wholeRentalDescJScrollPane;
    private JTextArea wholeRentalDescJTextArea;
    private JLabel wholeRentalIdJLabel;
    private JTextField wholeRentalIdJTextField;
    private JPanel wholeRentalJPanel;
    private JLabel wholeRoomJLabel;
    private JTextField wholeRoomJTextField;
    private JButton wholeSaveJButton;
    // End of variables declaration//GEN-END:variables
}
